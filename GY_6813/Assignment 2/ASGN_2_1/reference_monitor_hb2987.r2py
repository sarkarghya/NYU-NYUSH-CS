"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

# A list to keep track of closed files
closed_files = []

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False

        # Handle the case where 'default' is created
        if filename == 'default' and create:
            # If the default file is created, delete all closed files
            for file in closed_files[:]:
                try:
                    removefile(file)
                except Exception as e:
                    pass
            closed_files[:] = []  # Clear the closed files list after deletion

        # Ensure we use the default file if the file doesn't exist and create is False
        if not create:
            if 'default' in listfiles():
                # Open default file and use its content as the template
                default_file = openfile('default', False)
                content = default_file.readat(None, 0)  # Read entire content
                self.LPfile = openfile(filename, True)  # Create the new file
                self.LPfile.writeat(content, 0)  # Write the content of default to the new file
                default_file.close()
            else:
                raise FileNotFoundError("The default file does not exist.")
        else:
            self.LPfile = openfile(filename, create)  # Open the file normally

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # If the file being written to is 'default', delete closed files
        if self.LPfile == 'default':
            for file in closed_files[:]:
                try:
                    removefile(file)
                except Exception as e:
                    pass
            closed_files[:] = []  # Clear the closed files list after deletion

        self.LPfile.writeat(data, offset)  # Perform the actual write operation

    def close(self):
        self.LPfile.close()
        # Track this file in the list of closed files
        closed_files.append(self.LPfile)

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename in closed_files:
        closed_files.remove(filename)  # Remove it from the closed files if present
    removefile(filename)

    # If the default file is removed, delete all previously closed files
    if filename == 'default':
        for file in closed_files[:]:  # Use slicing to create a copy for iteration
            try:
                removefile(file)
            except Exception as e:
                # Log the error or handle it as needed
                pass
        # Clear the closed files list after removal
        closed_files[:] = []  # Clear the list using slicing

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()