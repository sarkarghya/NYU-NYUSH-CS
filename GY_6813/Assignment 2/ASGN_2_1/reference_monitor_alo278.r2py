TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

created_files = {}

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        self.filename = filename
        self.is_open = True

        if create == False and 'default' not in listfiles():
            raise FileNotFoundError
        
        else:
            if create == False and 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
                
            else:
                self.LPfile = openfile(filename, create)
            
            created_files[filename] = self
            defaultsecurity(filename)

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)
        defaultsecurity(self.filename)

    def close(self):
        self.LPfile.close()
        self.is_open = False
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    removefile(filename)
    defaultsecurity(filename)

def defaultsecurity(filename):
    if filename == 'default':
        files_to_remove = []

        for key in created_files:
            f = created_files[key]
            if f.is_open == False and key != 'default':
                removefile(key)
                files_to_remove.append(key)
        for key in files_to_remove:
            del created_files[key]
    

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()