"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

closed_files = set()
opened_files_registry = {}
DEFAULT = 'default'

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename
        if create == False:
            if DEFAULT in listfiles():
                # No duplicate default files
                if DEFAULT == filename:
                    raise FileInUseError("default file already exists")

                # Open default file if not already open
                default_file = opened_files_registry.get(DEFAULT)
                default_file_not_opened = (default_file == None)
                if default_file_not_opened:
                    default_file = openfile(DEFAULT, False)
                content = default_file.readat(None, 0)
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                if default_file_not_opened:
                    default_file.close() # Closing the opened default_file for file creation
                    closed_files.add(DEFAULT)
            else:
                raise FileNotFoundError("default file does not exist")
        else:
            # Default file create case
            if DEFAULT == filename and DEFAULT not in closed_files:
                processDefaultModifications()
            self.LPfile = openfile(filename, create)

        # Handling opened and closed files registry
        if filename in closed_files:
            closed_files.remove(filename)
        opened_files_registry[filename] = self.LPfile

    def readat(self, num_bytes, offset):
        try:
            return self.LPfile.readat(num_bytes, offset)
        except Exception as e:
            raise

    def writeat(self, data, offset):
        try:
            # Default file write case
            if self.filename == DEFAULT:
                processDefaultModifications()
            self.LPfile.writeat(data, offset)
        except Exception as e:
            raise

    def close(self):
        try:
            # Handling opened and closed files registry
            closed_files.add(self.filename)
            del opened_files_registry[self.filename]

            self.LPfile.close()
        except Exception as e:
            raise
        
def LPopenfile(filename, create):
    try:
        return LPFile(filename, create)
    except Exception as e:
        raise

def LPremovefile(filename):
    try:
        if filename not in listfiles():
            raise FileNotFoundError("File '{}' does not exist".format(filename))

        # Default file delete case
        if filename == DEFAULT:
            processDefaultModifications()
        else:
            removefile(filename)

        # Handling opened and closed files registry
        if filename in opened_files_registry:
            del opened_files_registry[filename]
        if filename in closed_files:
            closed_files.remove(filename)

    except Exception as e:
        raise

def processDefaultModifications():
    for file in closed_files:
        removefile(file)
    closed_files.clear()

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()