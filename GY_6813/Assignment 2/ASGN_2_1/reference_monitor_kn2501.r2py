# Constants for context definitions
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Track files created during the program run
created_files = set()

# LPFile class to handle custom file operations while adhering to the specifications
class LPFile():
    def __init__(self, filename, create):
        # Disable debugging
        mycontext['debug'] = False
        
        # Validate the filename
        if not validate_filename(filename):
            raise ValueError("Invalid filename: " + filename)

        # If create is False and the file doesn't exist, check for 'default' file
        if not create and filename not in listfiles():
            if 'default' in listfiles():
                try:
                    # Open 'default' file and copy its content into the new file
                    default_file = openfile('default', False)
                    content = default_file.readat(None, 0)  # Read full content from default
                    self.LPfile = openfile(filename, True)  # Create the new file
                    self.LPfile.writeat(content, 0)  # Write the default content
                    default_file.close()
                    
                    # Track that this file was created during the run
                    created_files.add(filename)
                except Exception as e:
                    # Handle any errors related to opening or reading 'default'
                    raise IOError("Error handling default file: " + str(e))
            else:
                # If no 'default' file exists, raise an error
                raise FileNotFoundError("File '" + filename + "' does not exist and 'create' is False.")
        else:
            try:
                # Open the file normally (creating it if necessary)
                self.LPfile = openfile(filename, create)
                if create:
                    # Track files that are created during the run
                    created_files.add(filename)
            except Exception as e:
                # Handle any errors related to opening the file
                raise IOError("Error opening file: " + str(e))

    # Read data from the file at a specific offset
    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    # Write data to the file at a specific offset
    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    # Close the file
    def close(self):
        self.LPfile.close()

# Helper function to validate filenames (must not start with '.' or be empty)
def validate_filename(filename):
    if len(filename) > 120:
        return False
    
    if filename in ['.', '..', '']:
        return False
    
    if filename[0] == '.':
        return False
    
    allowed_characters = set('abcdefghijklmnopqrstuvwxyz0123456789._-')
    for char in filename:
        if char not in allowed_characters:
            return False

    # If all checks passed, the filename is valid
    return True


# Function to open a file using LPFile class and return the custom file object
def LPopenfile(filename, create):
    return LPFile(filename, create)

# Function to remove a file and handle 'default' file case
def LPremovefile(filename):
    # Validate the filename before removing
    if not validate_filename(filename):
        raise ValueError("Invalid filename: " + filename)
    
    # Remove the file using Repy's native removefile function
    removefile(filename)
    
    # If removing 'default', also remove all files created during the run
    if filename == "default":
        try:  created_files.remove("default")
        except: pass
        for file in created_files:
            try:
                removefile(file)
            except Exception as e:
                # Handle any errors related to removing created files
                raise IOError("Error removing file '" + file + "': " + str(e))
        
        # Clear the created files set after deletion
        created_files.clear()



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
