"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

if 'active_files' not in mycontext:
    mycontext['active_files'] = set()
if 'inactive_files' not in mycontext:
    mycontext['inactive_files'] = set()

def check_filename_validity(filename):
    valid_chars = 'abcdefghijklmnopqrstuvwxyz0123456789-_.'
    if len(filename) > 120:
        raise Exception("Error: Filename is too long.")

    if filename in ['', '.', '..'] or filename.startswith('.'):
        raise Exception("Error: Invalid filename.")

    for c in filename:
        if c not in valid_chars:
            raise Exception("Error: Filename contains invalid characters. Use only lowercase letters, numbers, '-', '_', and '.'.")

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        check_filename_validity(filename)
        self.filename = filename

        if create:
            if self.filename == 'default' and self.filename in listfiles():
                removefile(self.filename)
            self.LPfile = openfile(filename, create)
            if self.filename == 'default':
                self.remove_inactive_files()
        else:
            if filename in listfiles():
                self.LPfile = openfile(filename, False)
            else:
                if 'default' in listfiles():
                    default_file = openfile('default', False)
                    content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                    default_file.close()
                    self.LPfile = openfile(filename, True)
                    self.LPfile.writeat(content, 0)
                else:
                    raise Exception("Error: 'default' file is missing.")

        mycontext['active_files'].add(self.filename)
        mycontext['inactive_files'].discard(self.filename)

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.filename == 'default':
            self.remove_inactive_files()
        self.LPfile.writeat(data, offset)

    def close(self):
        self.LPfile.close()
        mycontext['active_files'].discard(self.filename)
        if self.filename != 'default':
            mycontext['inactive_files'].add(self.filename)

    def remove_inactive_files(self):
        for fname in list(mycontext['inactive_files']):
            try:
                removefile(fname)
            except Exception:
                pass
            mycontext['inactive_files'].remove(fname)

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == 'default':
        for fname in list(mycontext['inactive_files']):
            try:
                removefile(fname)
            except Exception:
                pass
            mycontext['inactive_files'].remove(fname)
    try:
        removefile(filename)
    except Exception:
        pass
    mycontext['active_files'].discard(filename)
    mycontext['inactive_files'].discard(filename)

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()