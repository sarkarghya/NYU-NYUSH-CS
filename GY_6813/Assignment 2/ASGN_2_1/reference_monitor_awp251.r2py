"""
For Internet Security and Policy - CS-GY 6813

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False



        if 'closed_files' not in mycontext:
            mycontext['closed_files'] = []

        if create == False and 'default' in listfiles() and filename not in listfiles():
            default_file = openfile('default', False)
            default_content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile_secret = openfile(filename, True)
            self.LPfile_secret.writeat(default_content, 0)
            default_file.close()

            #AFTER SUCCESSFULLY CREATING A NEW FILE WITH TEMPLATE FROM DEFAULT
            #DELETE ALL PREVIOUSLY CLOSED FILES THAT WERE CREATED IN THE SAME RUN
            
            copied_content = self.LPfile_secret.readat(None, 0)
            if default_file.isclosed == True and default_content == copied_content:
                delete_closed_files()

        elif create == False and 'default' not in listfiles() and filename not in listfiles():
            raise FileNotFoundError("Creating a new file has not been enabled, and the default file used as a template is not in the current working directory or has had its name modified.")
            
        else: 
            #when create is False and file exists, file will be opened using original Repy API
            #when create is True  and file exsist, file will be opened using original Repy API
            #when create is True and file does not exsit, a new file will be created using original Repy API
            self.LPfile_secret = openfile(filename, create)

    

    def readat(self, num_bytes, offset):
        return self.LPfile_secret.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile_secret.writeat(data, offset)
        if self.LPfile_secret.name == 'default':
            #check if write was successful
            new_data = self.LPfile_secret.readat(None, offset)
            if new_data == data:
                delete_closed_files()


    def close(self):
        self.LPfile_secret.close()
        #check if close was successful
        if self.LPfile_secret.isclosed == True:
            #add filename to list of closed_files
            mycontext['closed_files'].append(self.LPfile_secret.name)


def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    removefile(filename)
    if filename == 'default':
        #check if default was successfully removed
        if filename not in listfiles():
            delete_closed_files()
            
def delete_closed_files():
        for closed_file in mycontext['closed_files']:
            #check if closed_file is still accessible (hasn't been removed since closing)
            if closed_file in listfiles():
                removefile(closed_file)
        mycontext['closed_files'] = [] 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()