"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext['closedfiles'] = []
mycontext['lock'] = createlock()

class LPFile():
    myLock = createlock()
    myfilename = ""
    def __init__(self, filename, create):
        mycontext['lock'].acquire(True)
        # globals
        mycontext['debug'] = False
        self.myfilename = filename
        if self.myfilename in mycontext['closedfiles']:
            mycontext['closedfiles'].remove(self.myfilename)

        if create == False:
            if filename not in listfiles():
                if "default" not in listfiles():
                    mycontext['lock'].release()
                    raise FileNotFoundError("default file does not exist")
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
            else:
                self.LPfile = openfile(filename, False)
        else:
            createdDefault = not "default" in listfiles() and filename == "default"
            self.LPfile = openfile(filename, create)
            if createdDefault:
                deleteallclosed()
            
        mycontext['lock'].release()

    def readat(self, num_bytes, offset):
        if self.myfilename == "default":
            deleteallclosed()
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        mycontext['lock'].acquire(True)
        if self.myfilename == "default":
            deleteallclosed()
        self.LPfile.writeat(data, offset)
        mycontext['lock'].release()

    def close(self):
        mycontext['lock'].acquire(True)
        self.LPfile.close()
        if self.myfilename != "default":
            mycontext['closedfiles'].append(self.myfilename)
        mycontext['lock'].release()
        
def LPopenfile(filename, create):
    if validfilename(filename):
        return LPFile(filename, create)
    else:
        raise RepyArgumentError("Invalid file name!")

def LPremovefile(filename):
    if validfilename(filename):
        mycontext['lock'].acquire(True)
        if filename == "default":
            deleteallclosed()
        if filename in mycontext['closedfiles']:
            mycontext['closedfiles'].remove(self.myfilename)
        removefile(filename) 
        mycontext['lock'].release()
    else:
        raise RepyArgumentError("Invalid file name!")

def deleteallclosed():
    for filename in mycontext['closedfiles']:
        removefile(filename)
    mycontext['closedfiles'] = []

def validfilename(filename):
    for c in filename:
        if c not in "qwertyuiopasdfghjklzxcvbnm.-_1234567890":
            return False
    if filename[0] == ".":
        return False
    return True

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()