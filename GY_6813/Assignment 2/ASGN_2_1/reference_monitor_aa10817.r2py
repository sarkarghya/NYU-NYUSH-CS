"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext['open_lock'] = createlock()
mycontext['created_lock'] = createlock()
mycontext['open_files'] = set()
mycontext['created_files'] = set()

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False
        self.filename = filename
        self.LPfile = None
        self.closed = False
        self.lock = createlock()

        try:
            mycontext['open_lock'].acquire(True)
            mycontext['created_lock'].acquire(True)
            if create:
                self.LPfile = openfile(filename, True)
                mycontext['created_files'].add(filename)
            elif filename in mycontext['created_files']:
                self.LPfile = openfile(filename, False)
            else:
                try:
                    default_file = openfile('default', False)
                    content = default_file.readat(None, 0)
                    default_file.close()
                    
                    self.LPfile = openfile(filename, True)
                    self.LPfile.writeat(content, 0)
                    mycontext['created_files'].add(filename)
                except FileNotFoundError:
                    raise FileNotFoundError("File not found and 'default' doesn't exist")
            
            mycontext['open_files'].add(filename)
        finally:
            mycontext['created_lock'].release()
            mycontext['open_lock'].release()
            if filename == 'default':
                # Adding a delay which otherwise seems to prevent the locking mechanism to work properly
                sleep(0.01)
                removeClosedFiles()

    def readat(self, num_bytes, offset):
        self.lock.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File is closed")
            elif offset < 0:
                raise RepyArgumentError("Negative offset not allowed")
            elif num_bytes is not None and num_bytes < 0:
                raise RepyArgumentError("Negative num_bytes not allowed")
            else:
                size = len(self.LPfile.readat(None, 0))
                if offset > size:
                    raise SeekPastEndOfFileError("Offset exceeds file length")
                return self.LPfile.readat(num_bytes, offset)
        finally:
            self.lock.release()

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File is closed")
            elif offset < 0:
                raise RepyArgumentError("Negative offset not allowed")
            elif not isinstance(data, str):
                raise RepyArgumentError("Data must be a string")
            else:
                content = self.LPfile.readat(None, 0)
                size = len(content)
                if offset > size:
                    raise SeekPastEndOfFileError("Offset exceeds file length")
                
                self.LPfile.writeat(data, offset)
                if self.filename == 'default':
                    removeClosedFiles()
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            if not self.closed:
                self.LPfile.close()
                self.closed = True
            try:
                mycontext['open_lock'].acquire(True)
                mycontext['open_files'].discard(self.filename)
            finally:
                mycontext['open_lock'].release()
        finally:
            self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    try:
        if filename == 'default' and filename in mycontext['created_files']:
            removeClosedFiles()

        mycontext['created_lock'].acquire(True)
        mycontext['open_lock'].acquire(True)
        if filename in mycontext['open_files']:
            raise FileInUseError("Cannot remove an open file")

        if filename in mycontext['created_files']:
            mycontext['created_files'].discard(filename)
        removefile(filename)
    finally:
        mycontext['open_lock'].release()
        mycontext['created_lock'].release()

def removeClosedFiles():
    try:
        mycontext['created_lock'].acquire(True)
        mycontext['open_lock'].acquire(True)
        for filename in list(mycontext['created_files']):
            if filename != 'default' and filename not in mycontext['open_files']:
                try:
                    removefile(filename)
                    mycontext['created_files'].discard(filename)
                except FileNotFoundError:
                    pass
                except FileInUseError:
                    pass
    finally:
        mycontext['open_lock'].release()
        mycontext['created_lock'].release()

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()