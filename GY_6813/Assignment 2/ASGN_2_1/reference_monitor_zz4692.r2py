"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        if filename in listfiles():                     # File exist just open
            self.LPfile = openfile(filename, create)
        else:    # file not exist
            if create == True:
                if filename == 'default':               # File not exist, create default, delete closed files
                    deleteClosedFiles()
                    self.LPfile = openfile(filename, True)
                elif filename != 'default':          # File not exist, create normal
                    self.LPfile = openfile(filename, True)
            elif create == False:
                if filename == 'default':               # File not exist, not creating default
                    raise FileNotFoundError
                elif filename != 'default':
                    if 'default' not in listfiles():    # File not exist, default missing
                        raise FileNotFoundError
                    else:                               # File not exist, default exist
                        # get a lock
                        mycontext['defaultLock'].acquire(True)
                        default_file = openfile('default', False)
                        content = default_file.readat(None, 0)  # Read from the file using the sandbox's readat
                        default_file.close()
                        mycontext['defaultLock'].release() 
                        # release the lock
                        self.LPfile = openfile(filename, True)
                        self.LPfile.writeat(content, 0)

        if filename != 'default':
            addOpenedFile(filename)
        self.filename = filename



    def readat(self, num_bytes, offset):
        if (num_bytes is not None and num_bytes < 0) or offset < 0:
            raise RepyArgumentError
        if checkClosedFile(self.filename):
            raise FileClosedError
        if self.getlen() < offset:
            raise SeekPastEndOfFileError
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if offset < 0 or not isinstance(data, str):
            raise RepyArgumentError
        if checkClosedFile(self.filename):
            raise FileClosedError
        if self.getlen() < offset:
            raise SeekPastEndOfFileError
        try:
            self.LPfile.writeat(data, offset)
            if self.filename == 'default':
                deleteClosedFiles()
        except Exception as e:
            raise

    def close(self):
        if checkClosedFile(self.filename):
            raise FileClosedError
        try:
            self.LPfile.close()
            if self.filename != 'default':
                addClosedFile(self.filename)
                removeOpenedFile(self.filename)
        except Exception as e:
            raise

    def getlen(self):
        return len(self.LPfile.readat(None, 0))


def LPopenfile(filename, create):
    if not validFileName(filename):     # check file name
        raise RepyArgumentError
    if checkOpenedFile(filename):       # check if in use
        raise FileInUseError
    return LPFile(filename, create)


def LPremovefile(filename):
    if not validFileName(filename):     # check file name
        raise RepyArgumentError
    if filename not in listfiles():     # check file exist
        raise FileNotFoundError
    if checkOpenedFile(filename):       # check if closed
        raise FileInUseError
    try:
        removefile(filename)
        if filename == 'default':
            deleteClosedFiles()
        else:
            removeClosedFile(filename)
    except Exception as e:
        raise


def deleteClosedFiles():
    if 'closedFiles' in mycontext:
        for closedFile in mycontext['closedFiles']:
            removefile(closedFile)
    mycontext['closedFiles'] = []

def validFileName(filename):
    if not filename:
        return False
    if filename[0] == '.':
        return False
    allowed_characters = "abcdefghijklmnopqrstuvwxyz0123456789.-_"
    for char in filename:
        if char not in allowed_characters:
            return False

    return True

def checkOpenedFile(fileName):
    if 'openedFiles' in mycontext:
        if fileName in mycontext['openedFiles']:
            return True
    return False


def checkClosedFile(fileName):
    if 'closedFiles' in mycontext:
        if fileName in mycontext['closedFiles']:
            return True
    return False


def addOpenedFile(fileName):
    if 'openedFiles' in mycontext:
        mycontext['openedFiles'].append(fileName)
    else:
        mycontext['openedFiles'] = [fileName]


def addClosedFile(fileName):
    if 'closedFiles' in mycontext:
        mycontext['closedFiles'].append(fileName)
    else:
        mycontext['closedFiles'] = [fileName]


def removeOpenedFile(fileName):
    if checkOpenedFile(fileName):
        mycontext['openedFiles'].remove(fileName)


def removeClosedFile(fileName):
    if checkClosedFile(fileName):
        mycontext['closedFiles'].remove(fileName)


if callfunc == 'initialize':
    mycontext['defaultLock'] = createlock()



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)),
                "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str,
               "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)),
              "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
