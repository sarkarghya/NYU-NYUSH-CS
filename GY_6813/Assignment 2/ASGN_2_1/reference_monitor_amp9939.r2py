"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

#only way of i thought to make it global for everything, not sure 
openfilesset = set([]) # This set contains the filenames of every file which is open - idea from emulfile.py
closedfiles = set([]) #This set contains the filename of every file that is closed 

mycontext = {
    'ofiles': [],  # tracking Track opened files
    'cfiles': []   # Track closed files
}
class LPFile():
    
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.isclosed = False #to check if file is closed, before read, write
        self.filename = filename

        #if create is false and file does not exist - default 
        if create == False and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            openfilesset.add(filename)
            self.LPfile.writeat(content, 0)
            default_file.close()
            closedfiles.add(filename)

        #if default does exist throw FileNotFoundError 
        elif create == False:
            raise FileNotFoundError('Sorry!! This file is false and default file was not found.')
       
        #if file does exist it, will open that file 
        else:
           self.LPfile = openfile(filename, create)
           openfilesset.add(filename)
           
        #updating the mycontext list:
        mycontext['ofiles'].append(self.filename)

    def readat(self, num_bytes, offset):
        # Check the arguments
        if num_bytes < 0 and num_bytes != None:
            raise RepyArgumentError("Negative sizelimit specified!")
        if offset < 0:
            raise RepyArgumentError("Negative read offset specified!")
        
        #if the file closed, raise FileClosedError because you can not read the file
        if self.isclosed:
            raise FileClosedError("file is closed, can not read the file, sorry")
        
        return self.LPfile.readat(num_bytes, offset)
       
        
    def writeat(self, data, offset):
        
        # Check the arguments
        if offset < 0:
            raise RepyArgumentError("Negative sizelimit specified!")
        
        # If the file is closed, raise FileClosedError
        if self.isclosed:
            raise FileClosedError("Sorry, file is closed, can not write to the file!!")
        
        # Normal behavior - writing to the file
        else:
            self.LPfile.writeat(data, offset)

        #when currently writing to default, the closed programs above will be deleted 
        if self.filename == 'default':
            for closed_file in mycontext['cfiles']:
               removefile(closed_file)


    def close(self):
        if self.isclosed:
            raise  FileClosedError ("the file is closed. sorry can not close the file again")
        
        #closing the file, and changing it to True
        self.LPfile.close()
        self.isclosed = True
        closedfiles.add(self.filename)

        if self.filename in openfilesset:
            openfilesset.discard(self.filename)

        mycontext['ofiles'].remove(self.filename)
        mycontext['cfiles'].append(self.filename)
        

def LPopenfile(filename, create):
    #if file is already opened 
    if filename in openfilesset:
        raise FileInUseError('Sorry. The file already has been opened, cannnot open the file twice')
    else:
        return LPFile(filename, create)

def LPremovefile(filename):

    # if file is opened, cannot remove  
    if filename in openfilesset:
        raise FileInUseError('Cannot remove file "' + filename + '" because it is opened, sorry!')

    # checking if filename not in listfiles()
    if filename not in listfiles():
        raise FileNotFoundError('The file "' + filename + '" was not found. Sorry!')

    # If the 'default' file is removed, delete all closed files
    if filename == 'default':
        for closed_file in mycontext['cfiles']:
            removefile(closed_file)

    #if the default is removed, then the previosuly closed files will also be removed 
    if 'default' not in listfiles():
        for closed_file in mycontext['cfiles']:
            removefile(closed_file)
    
    #removing a file, without default involved 
    removefile(filename)

   
# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
