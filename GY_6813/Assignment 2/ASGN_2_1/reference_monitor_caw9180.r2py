"""

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py, and Python.
    Also, you need to give it an application to run:
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 

    Modified by Cheyenne Williams for Computer Security Assignment 2.1
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


openFiles = {}
createdFiles = {}

# Filename validation function
VALID_CHARS = "abcdefghijklmnopqrstuvwxyz0123456789-_."

def validFilename(filename):
# check for length, invalid string, and char validation
    if len(filename) == 0 or len(filename) > 120:
        return False
    if filename[0] == "." or filename in [".", ".."]:
        return False
    for char in filename:
        if char not in VALID_CHARS:
            return False

    return True

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False
        
        #Validate file
        if not validFilename(filename):
            raise Exception('Invalid filename "{}". Requirments: only lowercase letters, numbers, hyphens, underscores, and periods. Max length = 120 characters.'.format(filename))

        self.filename = filename
        
        if create:
            if filename in listfiles():
                raise Exception('The file "{}" already exists. Cannot overwrite.'.format(filename))
        
        # Note for self: If not create and the file doesn't exist, create from the default file if its there
        if create == False and filename not in listfiles():
            if "default" in listfiles():
                default_file = openfile("default", False)
                content = default_file.readat(None, 0)  # Read all content from the default file
                self.LPfile = openfile(filename, True) 
                self.LPfile.writeat(content, 0)
                default_file.close()

                createdFiles[filename] = True 
            else:
                # Default file missing, raise an error
                raise Exception('The "default" file is missing.')
        else:
            self.LPfile = openfile(filename, create)
        
        # Tracking files
        openFiles[filename] = self.LPfile

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    def close(self):

        filename = self.filename #using stored
        self.LPfile.close()
        
        # Remove from open files list when closed
        if filename in openFiles:
            del openFiles[filename]
        
        # If file was created from default track it closed
        if filename in createdFiles:
            createdFiles[filename] = None

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    # Check if open
    if filename in openFiles:
    
        raise Exception('Cannot remove file "{}" because it is in use'.format(filename))
    
    # Remove the file if not open
    removefile(filename)
    
    # Clean tracking if file is removed
    if filename in createdFiles:
        del createdFiles[filename]





# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()