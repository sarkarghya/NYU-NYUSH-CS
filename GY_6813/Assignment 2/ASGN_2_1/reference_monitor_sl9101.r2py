"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

file_lock = createlock()

class LPFile():
    open_files = {}  # Tracks the state of all generated files: {filename: is_open}

    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.name = filename
        LPFile.open_files[filename] = True 

        if create == False: 
            if 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
            else:
                raise FileNotFoundError("Template file 'default' not found.")
        else:
            self.LPfile = openfile(filename, create)

    def readat(self, num_bytes, offset):
        file_lock.acquire(True)
        try:
            return self.LPfile.readat(num_bytes, offset)
        except:
            raise
        finally:
            file_lock.release()

    def writeat(self, data, offset):
        to_delete = []
        file_lock.acquire(True)
        try:
            self.LPfile.writeat(data, offset)
        except:
            raise
        finally:
            file_lock.release()
        
        # Writing default causes the previously closed files to be deleted
        if self.name == 'default':
            for file, is_open in LPFile.open_files.items():
                if not is_open and file in listfiles():
                    try:
                        removefile(file)
                        del LPFile.open_files[file]
                    except:
                        raise

    def close(self):
        file_lock.acquire(True)
        try:
            self.LPfile.close()
            LPFile.open_files[self.name] = False
        except:
            raise
        finally:
            file_lock.release()
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    file_lock.acquire(True)
    try:
        removefile(filename)
        # Deleting default causes the previously closed files to be deleted
        if filename == 'default':
            for file, is_open in LPFile.open_files.items():
                if not is_open and file in listfiles():
                    removefile(file)
                    del LPFile.open_files[file]
    except:
        raise
    finally:
        file_lock.release()


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()