"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

CHILD_CONTEXT_DEF = {}

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        if create == False and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            self.made_by_default = True
            default_file.close()
        else: 
            if not create:
                raise FileNotFoundError("The 'default' file is missing and cannot open file")
            self.LPfile = openfile(filename, create)
            self.made_by_default = False

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    def close(self):
        self.LPfile.close()

def LPopenfile(filename, create):
    file = LPFile(filename, create)
    if file.made_by_default:
        mycontext['files_created_by_default'].append(filename)
    return file

def LPremovefile(filename):
    if filename == 'default':
        for file_created in mycontext['files_made_by_default']:
            if file_created in listfiles():
                removefile(file_created)
        mycontext['files_made_by_default'].clear()
    removefile(filename) 

def inital_sec_layer():
    if 'files_made_by_default' not in mycontext:
        mycontext['files_made_by_default']=[]
    if 'open_files' not in mycontext:
        mycontext['open_files'] = []
inital_sec_layer()



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
