"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

open_files = set()
class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        self.filename = filename
        self.LPfile = None
        self.is_closed = False

        if filename in open_files:
            raise FileInUseError("File is already open.")

        if create:
            self.LPfile = openfile(filename, True) 
            open_files.add(filename) 
        else:
            if 'default' not in listfiles():
                raise FileNotFoundError("Default file does not exist.")
            default_file = openfile('default', False)
            content = default_file.readat(None, 0)  
            default_file.close()
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            open_files.add(filename)

    def readat(self, num_bytes, offset):
        if self.is_closed:
            raise RuntimeError("Cannot read from a closed file.")
        if offset < 0:
            raise ValueError("Offset cannot be negative.")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.is_closed:
            raise RuntimeError("Cannot write to a closed file.")
        if offset < 0:
            raise ValueError("Offset cannot be negative.")
        self.LPfile.writeat(data, offset)

    def close(self):
        if self.is_closed:
            raise RuntimeError("File is already closed.")
        self.LPfile.close()
        open_files.discard(self.filename)  
        self.is_closed = True
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == "default":        
        removefile(filename)
    removefile(filename) 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()