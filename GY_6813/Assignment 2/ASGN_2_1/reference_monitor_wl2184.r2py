"""
This security layer inadequately handles parity for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 


class RepyParityError(Exception):
	pass

class FileIsOpenedError(Exception):
    pass

class FileNotOpenError(Exception):
    pass


class EvenParityFile():
  def __init__(self, filename, create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.fn = filename
    
    if self.fn in listfiles():
        if create:
            raise FileIsOpenedError("File already exists")


    else:
        if not create:
            raise FileNotOpenError("File doesn't exist")
    
    self.file = openfile(self.fn, create)
    self.is_open = True
    self.is_written = False
    self.is_created = create


  def writeat(self,data,offset):
    if not self.is_open:
        raise FileNotOpenError("Error writing to a closed file")
    # check the parity of the data written

    self.is_written = True

    thisdata = data
    while thisdata:
        eightbytesequence = thisdata[:8]
        thisdata = thisdata[8:]
        even = True
        for thisbyte in eightbytesequence:
          # for each byte, if it is odd, flip even to be the opposite
          if ord(thisbyte) % 2:
            even = not even
            
        # actually call write, if we are supposed to...
        if even:
          self.file.writeat(eightbytesequence, offset)
        # ...or error out.
        else:
          raise RepyParityError("Non-even parity write to file")
  
  
  def readat(self, bytes, offset):
    # Read from the file using the sandbox's readat...
    if not self.is_open:
        raise FileNotOpenError("File is not opened")
    return self.file.readat(bytes, offset)

  def close(self):
    if self.is_open:
        self.file.close()
        self.is_open = False
        if self.is_created or self.is_written:
            self.delete_unnecessary_files()
    else:
        raise FileNotOpenError("File is closed already.")
  
  def delete_unnecessary_files(self):
    if self.fn in listfiles():
        removefile(self.fn)


def parityopenfile(filename, create):
  return EvenParityFile(filename, create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{
                    "type":"func",
                    "args":(str,(int,long)),
                    "exceptions":Exception,
                    "return":(int,type(None)),
                    "target":EvenParityFile.writeat
                },
                "readat":{
                    "type":"func",
                    "args":((int,long,type(None)),(int,long)),
                    "exceptions":Exception,
                    "return":str,
                    "target":EvenParityFile.readat
                },
                "close":{
                    "type":"func",
                    "args":None,
                    "exceptions":None,
                    "return":(bool,type(None)),
                    "target":EvenParityFile.close
                }
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()