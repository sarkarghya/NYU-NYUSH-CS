"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


# global
closed_files = []                                                                   # creates an empty list to store closed files
lock = createlock()                                                                 # creates lock

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename
        self.is_default = (filename == 'default')                                   # checks if the filename is default

        if not create:                                                              # checks if it is an existing file
            if 'default' in listfiles():                                            # checks if default file exists
                default_file = openfile('default', False)                           # opens default file in read mode
                content = default_file.readat(None, 0)                              # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)                              # opens filename in write mode
                self.LPfile.writeat(content, 0)                                     # writes default file's content onto new file
                default_file.close()                                                # closes default file
            else:
                raise FileNotFoundError("The 'default' file does not exist.")       # raises error if default file does not exist
        else:
            self.LPfile = openfile(filename, create)                                # otherwise, creates file


    def readat(self, num_bytes, offset):                                            # reads file
        lock.acquire(True)                                                          # acquires lock
        try:            
            return self.LPfile.readat(num_bytes, offset)                            # reads 'num_bytes' from the file starting at offset and returns contents
        except:
            raise                                                                   # raises error
        finally:
            lock.release()                                                          # releases lock


    def writeat(self, data, offset):                                                # writes to file
        lock.acquire(True)
        try:
            self.LPfile.writeat(data, offset)                                       # write 'data' to file starting at offset
        except:
            raise
        finally:
            lock.release()

        if self.is_default:                                                         # checks if file we are writing to is the default file
            for file_name in closed_files:                                          # iterates through the files in closed_files list
                if file_name != 'default':                                          # checks if the file we are modifying is the default file
                    try:
                        removefile(file_name)                                       # if it is, delete the default file
                    except:
                        raise
            closed_files[:] = []                                                    # empties closed_files list


    def close(self):
        lock.acquire(True)
        try:
            self.LPfile.close()                                                     # closes file
        except:
            raise
        finally:
            lock.release()

        if self.filename not in closed_files:                                       # after closing the file, checks if the filename is not in closed_files list
            closed_files.append(self.filename)                                      # append filename to closed_files list


def LPopenfile(filename, create):
    lock.acquire(True)
    try:
        return LPFile(filename, create)
    except:
        raise
    finally:
        lock.release()


def LPremovefile(filename):
    lock.acquire(True)
    try:
        removefile(filename)                                                        # deletes filename.txt

        if filename == 'default':                                                   # checks if it is the default file being deleted
            for file_name in closed_files:                                          # iterates through files in the closed_files list
                if file_name != 'default':                                          # skips default file in the list
                    try:
                        removefile(file_name)                                       # deletes file
                    except:
                        raise
            closed_files[:] = []                                                    # clears the list
    except:
        raise
    finally:
        lock.release()



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()