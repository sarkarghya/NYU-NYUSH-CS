"""
Reference Monitor Implementation for File Operations in Repy V2

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


def deleteClosedFiles():

    for filename in LPFile.createdFiles:
        if filename in listfiles() and filename not in LPFile.openFiles:
            removefile(filename)
    LPFile.createdFiles[:] = []
        
def LPopenfile(filename, create):

    return LPFile(filename, create)

def LPremovefile(filename):

    if filename == 'default':
        deleteClosedFiles()
    removefile(filename) 

    if filename in LPFile.openFiles:
        LPFile.openFiles.remove(filename)
    
    if filename in LPFile.createdFiles:
        LPFile.createdFiles.remove(filename)

class LPFile():

    createdFiles = []
    openFiles = []

    def __init__(self, filename, create):

        mycontext['debug'] = False
        self.filename = filename

        if not create and 'default' in listfiles():
            default_file = openfile('default', False)
            try:
                content = default_file.readat(None, 0)
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
            # Ensure that the file is closed, even if an exception occurs, to avoid resource leaks
            finally:
                default_file.close()
            LPFile.createdFiles.append(filename)
        
        else:
            self.LPfile = openfile(filename, create)
        
        LPFile.openFiles.append(filename)

        if self.filename == 'default':
            deleteClosedFiles()

    def readat(self, num_bytes, offset):

        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):

        if self.LPfile == 'default':
            deleteClosedFiles()
        self.LPfile.writeat(data, offset)

    def close(self):
        
        self.LPfile.close()
        if self.filename in LPFile.openFiles:
            LPFile.openFiles.remove(self.filename)


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()