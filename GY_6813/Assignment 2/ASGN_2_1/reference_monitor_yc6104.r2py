"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

opened_files = {}  
closed_files = []
max_handle = 50

class LPFile():
    def __init__(self, filename, create):
        # global opened_files, closed_files, max_handle
        mycontext['debug'] = False

        if not self.validate_filename(filename):
            raise RepyArgumentError
        
        if type(create) != type(True):
            raise RepyArgumentError       
        
        if opened_files.get(filename) != None:
            raise FileInUseError
        
        if len(opened_files) >= max_handle:
            raise ResourceExhaustedError

        # if 'default' not in listfiles():
        #     raise FileNotFoundError
        if create == False and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            try:
                self.LPfile = openfile(filename, True)
            except:
                raise FileNotFoundError
            self.LPfile.writeat(content, 0)
            default_file.close()
        else:
            try:
                self.LPfile = openfile(filename, create)
            except:
                raise FileNotFoundError

        opened_files[filename] = True
        self.filename = filename

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    def close(self):
        g = opened_files.get(self.filename)
        if g == None:
            raise FileClosedError
        self.LPfile.close()
        closed_files.append(self.filename)
        del opened_files[self.filename]

    def validate_filename(self, filename):
        if filename[0] == '.' or len(filename) == 0:
            return False
        for c in filename:
            if c not in "abcdefghijklmnopqrstuvwxyz0123456789.-_":
                return False
        return True
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == 'default':
        delete_previous(closed_files)
    removefile(filename) 

def delete_previous(closed_files):
    # global closed_files
    for f in closed_files:
        try:
            removefile(f)
        except FileNotFoundError:
            pass
    closed_files[:] = []

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()