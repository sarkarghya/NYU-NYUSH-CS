"""
Qahtan's property
qaj201@nyu.edu

Some notes that I kept from the original
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# I didnt change anything above this point

# Global variables
mycontext['open_files'] = set()
mycontext['default_content'] = None
mycontext['global_lock'] = createlock()

def validate_filename(filename):
    allowed_chars = 'abcdefghijklmnopqrstuvwxyz0123456789.-_'
    if not filename:
        raise ValueError
    for char in filename:
        if char not in allowed_chars:
            raise ValueError

class LPFile():
    def __init__(self, filename, create):
        validate_filename(filename)
        self.filename = filename
        self.file_lock = createlock()
        
        mycontext['global_lock'].acquire(True)
        try:
            if filename in mycontext['open_files']:
                raise FileInUseError
            
            self.file_lock.acquire(True)
            try:
                if create:
                    self.LPfile = openfile(filename, create)
                elif 'default' in listfiles():
                    default_file = openfile('default', False)
                    try:
                        content = default_file.readat(None, 0)
                        self.LPfile = openfile(filename, True)
                        self.LPfile.writeat(content, 0)
                    finally:
                        default_file.close()
                else:
                    raise FileNotFoundError
                
                self.length = len(self.LPfile.readat(None, 0))
                mycontext['open_files'].add(filename)
            finally:
                self.file_lock.release()
        finally:
            mycontext['global_lock'].release()

    def readat(self, bytes, offset):
        self.file_lock.acquire(True)
        try:
            return self.LPfile.readat(bytes, offset)
        finally:
            self.file_lock.release()

    def writeat(self, data, offset):
        self.file_lock.acquire(True)
        try:
            if offset == self.length and self.filename == 'default':
                if '\n' not in data:
                    self.LPfile.writeat(data, offset)
                    self.length = max(self.length, len(data) + offset)
                elif '\n' in data:
                    counter = data.count('\n')
                    if counter > 1:
                        raise RepyArgumentError
                    else:
                        loc = data.find('\n')
                        self.LPfile.writeat(data[:(loc+1)] + "    " + data[(loc+1):], offset)
                        self.length = len(data) + offset + 4
            else:
                self.LPfile.writeat(data, offset)
                self.length = max(offset + len(data), self.length)
            
            if self.filename == 'default':
                self._update_default()
        finally:
            self.file_lock.release()

    def close(self):
        mycontext['global_lock'].acquire(True)
        try:
            self.file_lock.acquire(True)
            try:
                self.LPfile.close()
                mycontext['open_files'].remove(self.filename)
            finally:
                self.file_lock.release()
        finally:
            mycontext['global_lock'].release()

    def _update_default(self):
        mycontext['global_lock'].acquire(True)
        try:
            mycontext['default_content'] = self.LPfile.readat(None, 0)
            for filename in list(mycontext['open_files']):
                if filename != 'default' and filename not in mycontext['open_files']:
                    removefile(filename)
        finally:
            mycontext['global_lock'].release()

def LPopenfile(filename, create):
    validate_filename(filename)
    return LPFile(filename, create)

def LPremovefile(filename):
    validate_filename(filename)
    mycontext['global_lock'].acquire(True)
    try:
        if filename in mycontext['open_files']:
            raise FileInUseError
        removefile(filename)
        if filename == 'default':
            for open_file in list(mycontext['open_files']):
                if open_file != 'default':
                    removefile(open_file)
            mycontext['default_content'] = None
    finally:
        mycontext['global_lock'].release()

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()