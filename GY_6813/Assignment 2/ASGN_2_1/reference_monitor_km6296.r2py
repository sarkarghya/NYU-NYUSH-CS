"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class LPFile():

    _created_files = []
    _open_files = []

    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename

        if create == False and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0)
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            default_file.close()
            LPFile._created_files.append(filename)
            LPFile._open_files.append(filename)
        else:
            self.LPfile = openfile(filename, create)
            LPFile._open_files.append(filename)
            if self.LPfile == 'default':
                delete_created_files()


    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.LPfile == 'default':
            delete_created_files()
        self.LPfile.writeat(data, offset)

    def close(self):
        self.LPfile.close()
        if self.filename in LPFile._open_files:
            LPFile._open_files.remove(self.filename)

def delete_created_files():
    for filename in LPFile._created_files:
        if filename in listfiles() and filename not in LPFile._open_files:
            removefile(filename)
    LPFile._created_files[:] = []
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == 'default':
        delete_created_files()
    removefile(filename) 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()