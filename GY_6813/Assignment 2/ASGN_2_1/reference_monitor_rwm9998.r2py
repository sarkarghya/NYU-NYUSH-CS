"""
Ryan Menier
CompSec Assignment 2.1
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

default_files = []

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        self.open = False #states if file is open
        self.name = filename #name of file

        #check to see if default file exists
        if 'default' in listfiles():
            DEFAULT_EXISTS = True
        else:
            DEFAULT_EXISTS = False

        if create == False: #if using template
            if DEFAULT_EXISTS: #if default exists
                if filename in listfiles():
                    self.LPfile = openfile(filename, True)
                    self.open = True
                else:
                    default_file = openfile('default', False)
                    content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                    self.LPfile = openfile(filename, True)
                    default_files.append(self) #mark as a default file
                    self.open = True #file is open
                    self.LPfile.writeat(content, 0)
                    default_file.close()
            else:
                raise Exception("FileNotFoundError") #no default file error

        else:
            self.LPfile = openfile(filename, create)

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.name == "default": #delete files if default file changes
            deletedefaults()
        self.LPfile.writeat(data, offset)

    def close(self):
        self.open = False
        self.LPfile.close()
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == "default": #delete default files if default file is deleted
        deletedefaults()
    removefile(filename)

def deletedefaults():
    for file in default_files: #deletes all files using the default template
        if file.open == False:
            removefile(file.name)


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
