""" 
This security layer implements a defense monitor for file operations with the following key features:

1. Manages a 'default' template file for creating new files.
2. Implements standard file operations: open, read, write, close, and delete.
3. Ensures thread-safety using locks for all file operations.
4. Implements special behavior when the 'default' file is modified or deleted.
5. Maintains efficiency by minimizing unnecessary operations.
Focuses on accuracy, efficiency, and security in file handling.

This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python.
To run: python repy.py restrictions.default encasementlib.r2py [this_filename].r2py [attack_program].r2py

"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        mycontext['d_files'] = []
        
        self.filename = filename
        self.LPfile = None
        self.lock = createlock()
        
        self.lock.acquire(True)
        try:
            if create:
                self.LPfile = openfile(filename, True)
            elif 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0)
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
                mycontext['d_files'].append(filename)
            else:
                raise FileNotFoundError("Default file not found")
        finally:
            self.lock.release()

    def readat(self, num_bytes, offset):
        self.lock.acquire(True)
        try:
            return self.LPfile.readat(num_bytes, offset)
        finally:
            self.lock.release()

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            self.LPfile.writeat(data, offset)
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            self.LPfile.close()
        finally:
            self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    file_lock = createlock()
    file_lock.acquire(True)
    try:
        if filename == 'default':
            # Remove all closed files that were created from the default template
            if 'd_files' in mycontext:
                for f in mycontext['d_files']:
                    try:
                        removefile(f)
                        mycontext['d_files'].remove(f)
                    except:
                        pass  # File might be open or already removed
        removefile(filename)
    finally:
        file_lock.release()


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
