"""
This security layer manages file operations while enforcing security rules.
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# A list to keep track of open files
open_files = []

# Define the maximum number of allowed open files
MAX_FILE_HANDLES = 10

# A list to keep track of created files
created_files = []

def default_event(filename, created_files, open_files):
        #Handle the deletion of closed files when 'default' is created, written to, or deleted
        # Iterate through created files and delete those that are not open
        for filename in created_files: 
            if filename not in open_files:
                removefile(filename)  # Delete closed files
                created_files.remove(filename)

class LPFile():
    def __init__(self, filename, create):


        # Globals
        mycontext['debug'] = False

        #check if the argument are valid before creating
        if not self.is_valid_arguments(filename,create):
            raise RepyArgumentError("Invalid Arguments.")

        #check if the file being created is default and run the need functions
        if filename == 'default':
            default_event(filename,created_files,open_files)
        #check if the file is open
        if filename in open_files:
            raise FileInUseError("The" + filename + "is already open.")
        
        # Check if the resource limit has been exhausted
        if len(open_files) >= MAX_FILE_HANDLES:
            raise ResourceExhaustedError("No available file handles. Resource exhausted.")
        
        #check is the create is false and the list in not in the directory
        if not create and filename not in listfiles():
                raise FileNotFoundError("The file: " + filename + " was not found")

        #check if default is not in the directory and create is false
        if not create and 'default' not in listfiles():
            raise FileNotFoundError("Default template is not available.")

        # If we need to use the default file template
        if not create and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0)  # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            default_file.close()
        else:
            self.LPfile = openfile(filename, create)

        #set the different attributes:
        self.is_closed = False  # Track if the file is open or closed
        self.filename = filename
        open_files.append(filename)  # Track open files
        created_files.append(filename) #Track created files

    def readat(self, num_bytes, offset):
        #check if is valid to read
        if self.is_read_valid:
            if self.filename == 'default':
                default_event(self.filename,created_files,open_files)
            return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        #check if is valid to write
        if self.is_write_valid:
            if self.filename == 'default':
                default_event(self.filename,created_files,open_files)
            self.LPfile.writeat(data, offset)

    def close(self):
        #check if is valid to close
        if self.is_closed:
            raise FileClosedError("The file is already closed.")
        #remove from open file list
        self.LPfile.close()
        self.is_closed = True  # Mark the file as closed
        open_files.remove(self.filename)


    def is_valid_arguments(self,filename,create):
        #check all the needed exceptions for arguments file
        if type(create) != type(True):
           return False
        elif filename == "" or filename[0] == '.':
            return False
        allowed_characters = "abcdefghijklmnopqrstuvwxyz0123456789.-_"
        for char in filename:
            if char not in allowed_characters:
                return False
        else:
            return True

    def get_file_size(self):
        # Save the current position of the file pointer
        current_position = self.LPfile.tell()

        # Move the file pointer to the end of the file
        self.LPfile.seek(0, 2) 

        # Get the file size (position at the end of the file)
        file_size = self.LPfile.tell()

        # Restore the original position of the file pointer
        self.LPfile.seek(current_position, 0)  

        return file_size

    def is_read_valid(self, num_bytes, offset):

        file_size = self.get_file_size()
        #check all the needed exceptions for read file
        if self.is_closed:
            raise FileClosedError("The file is already closed.")
        elif offset < 0 or (num_bytes is not None and num_bytes < 0):
            raise RepyArgumentError("Offset or size cannot be negative.")
        elif offset > file_size:
           raise SeekPastEndOfFileError("Attempted to read past the end of the file.")
        elif num_bytes is not none and offset + num_bytes > file_size:
            raise SeekPastEndOfFileError("Reading will exceed file size")
        else:
            return True
    
    def is_write_valid(self, data, offset):

        file_size = self.get_file_size()
        #check all the needed exceptions for write file
        if self.is_closed:
            raise FileClosedError("The file is already closed.")
        elif offset < 0:
            raise RepyArgumentError("Offset or size cannot be negative.")
        if type(data) != type(""):
            raise RepyArgumentError("Data must be a string.")
        elif offset > file_size:
           raise SeekPastEndOfFileError("Attempted to read past the end of the file.")
        else:
            return True


def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    #check all the needed exceptions for remove file
    if filename == "" or filename[0] == '.':
            raise RepyArgumentError("Invalid Arguments.")
    allowed_characters = "abcdefghijklmnopqrstuvwxyz0123456789.-_"
    for char in filename:
         if char not in allowed_characters:
            raise RepyArgumentError("Invalid Arguments.")
    if filename in open_files:
            raise FileInUseError("The" + filename + "is open.")
    if filename  not in listfiles():
        raise FileNotFoundError("The file: " + filename + " was not found")
    
    if filename == 'default':
        default_event(filename,created_files,open_files)
    
    removefile(filename)

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
