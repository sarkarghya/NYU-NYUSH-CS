"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# =======================================================================================

closed_files = []
open_lock = createlock()
remove_lock = createlock()
instan_lock = createlock()
write_lock = createlock()
read_lock = createlock()

# =======================================================================================
class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename

        if instan_lock.acquire(True):
            try:
                if filename == 'default':
                        # remove closed files list:
                        for file in closed_files:
                            if file in listfiles():
                                removefile(file)
                        closed_files[:] = []

                if create == False and 'default' in listfiles():
                    default_file = openfile('default', False)
                    default_content = default_file.readat(None, 0) 
                    self.LPfile = openfile(filename, True)
                    self.LPfile.writeat(default_content, 0)
                    default_file.close()
                else:
                    self.LPfile = openfile(filename, create)
            finally:
                instan_lock.release()

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if write_lock.acquire(True):
            try:
                if self.filename == 'default':
                    # remove closed files list:
                    for file in closed_files:
                        if file in listfiles():
                            removefile(file)
                    closed_files[:] = []
                self.LPfile.writeat(data, offset)
            finally:
                write_lock.release()

    def close(self):
        if read_lock.acquire(True):
            try:
                if self.filename not in closed_files:
                    closed_files.append(self.filename)
                self.LPfile.close()
            finally:
                read_lock.release()
        
# =======================================================================================
def LPopenfile(filename, create):        
    if open_lock.acquire(True):
        try:
            if create == False and 'default' not in listfiles():
                raise FileNotFoundError("Default File not found.")
            
            
            if filename == 'default':
                # remove closed files list:
                for file in closed_files:
                    if file in listfiles():
                        removefile(file)
                closed_files[:] = []
                return LPFile(filename, create)
            else:
                return LPFile(filename, create)
            
        finally:
            open_lock.release()

# =======================================================================================
def LPremovefile(filename):
    if remove_lock.acquire(True):
        try:
            if filename == 'default':
                # remove closed files list:
                for file in closed_files:
                    if file in listfiles():
                        removefile(file)
                closed_files[:] = []
                if filename in listfiles():    
                    removefile(filename)
                else:
                    raise FileNotFoundError("File not found.")
            else:
                if filename in listfiles():
                    removefile(filename)
                else:
                    raise FileNotFoundError("File not found.")
                
        finally:
            remove_lock.release() 

# =======================================================================================

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()