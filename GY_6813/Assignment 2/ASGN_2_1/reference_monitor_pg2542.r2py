"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext['files_list'] = {}

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename

        if create == False and 'default' in listfiles():
            try:
                default_file = openfile('default', False)
            except Exception:
                pass
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)

            # Add this newly opened file to files list
            if 'filename' not in mycontext['files_list']:
                self.LPfile.writeat(content, 0)

            mycontext['files_list'][filename] = 1        
            
            default_file.close()
        else:
            # Adding this open file to the list
            self.LPfile = openfile(filename, create)
            mycontext['files_list'][filename] = 1


    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # If default is changed remove all closed files
        l = []
        if self.filename == 'default':
            for file in mycontext['files_list']:
                if mycontext['files_list'][file] == 0:   
                    l.append(file)             
                    removefile(file)
            for file in l:
                del mycontext['files_list'][file]

        self.LPfile.writeat(data, offset)

    def close(self):
        self.LPfile.close()
        mycontext['files_list'][self.filename] = 0

        
def LPopenfile(filename, create):

    return LPFile(filename, create)

def LPremovefile(filename):
    l = []
    if filename == 'default':
        for file in mycontext['files_list']:
            if mycontext['files_list'][file] == 0:
                l.append(file)
                removefile(file)
        for file in l:
            del mycontext['files_list'][file]


    removefile(filename) 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()