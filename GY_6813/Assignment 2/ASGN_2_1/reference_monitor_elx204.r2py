"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py, and Python.
    Also, you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

# keep track of open files and closed files
mycontext['open_files'] = {}
mycontext['closed_files'] = set()

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename
        self.closed = False

        if create == False and 'default' in listfiles():
            if filename in listfiles():
                # file exists -> open without creating
                self.LPfile = openfile(filename, False)
            else:
                # use 'default' as template
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
        else:
            self.LPfile = openfile(filename, create)

        # add to open files
        mycontext['open_files'][filename] = self

    def readat(self, num_bytes, offset):
        if self.closed:
            raise FileClosedError("Cannot read from a closed file.")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.closed:
            raise FileClosedError("Cannot write to a closed file.")
        # if writing to 'default', delete closed files
        if self.filename == 'default':
            self.LPfile.writeat(data, offset)
            delete_closed_files()
        else:
            self.LPfile.writeat(data, offset)

    def close(self):
        if self.closed:
            raise FileClosedError("File is already closed.")
        self.LPfile.close()
        self.closed = True
        # remove from open files and add to closed files
        del mycontext['open_files'][self.filename]
        mycontext['closed_files'].add(self.filename)

def is_open(filename):
    return filename in mycontext['open_files']

def delete_closed_files():
    # remove all closed files except default
    for filename in list(listfiles()):
        if filename != 'default' and filename in mycontext['closed_files']:
            try:
                removefile(filename)
            except FileNotFoundError:
                pass
    # clear set of closed files
    mycontext['closed_files'].clear()

def LPopenfile(filename, create):
    # check if file is already open
    if is_open(filename):
        raise FileInUseError("File is already open.")

    # if 'default' is created/written/deleted, delete closed files
    if filename == 'default' and create:
        delete_closed_files()

    return LPFile(filename, create)

def LPremovefile(filename):
    # if default is removed, delete closed files
    if filename == 'default':
        delete_closed_files()

    # remove file
    removefile(filename)

    # clean up
    mycontext['open_files'].pop(filename, None)
    mycontext['closed_files'].discard(filename)

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {
        "type": "func",
        "args": (str, (int, long)),
        "exceptions": Exception,
        "return": (int, type(None)),
        "target": LPFile.writeat
    },
    "readat": {
        "type": "func",
        "args": ((int, long, type(None)), (int, long)),
        "exceptions": Exception,
        "return": str,
        "target": LPFile.readat
    },
    "close": {
        "type": "func",
        "args": None,
        "exceptions": Exception,
        "return": (bool, type(None)),
        "target": LPFile.close
    }
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()