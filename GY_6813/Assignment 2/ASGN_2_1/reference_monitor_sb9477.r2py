"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        self.closed_files = {}
        self.default_modi = False
        self.default_modi_time = getruntime()

        mycontext['debug'] = False

        self.filename = filename
        self.lock = createlock()

        if create:
            self.LPfile = openfile(filename, create)
        else:
            if filename in listfiles():
                self.LPfile = openfile(filename, create)
            else:
                if 'default' in listfiles():
                    default_file = openfile('default', False)
                    content = default_file.readat(None, 0)
                    self.LPfile = openfile(filename, True)
                    self.LPfile.writeat(content, 0)
                    default_file.close()
                else:
                    raise FileNotFoundError("Default file does not exist.")


    def readat(self, num_bytes, offset):
        self.lock.acquire(True)
        try:
            if offset < 0:
                raise ValueError("Invalid offset: cannot be negative")

            length = len(self.LPfile.readat(None, 0))

            if offset >= length:
                raise SeekPastEndOfFileError("Offset is past the end of the file")
            elif num_bytes != None and num_bytes > length:
                raise SeekPastEndOfFileError("Bytes to read cannot exceed file size")
            elif num_bytes != None and num_bytes > length - offset:
                raise SeekPastEndOfFileError("Bytes to read cannot exceed remaining file size")

            return self.LPfile.readat(num_bytes, offset)
        finally:
            self.lock.release()

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            if offset < 0:
                raise ValueError("Invalid offset: cannot be negative")
            elif offset > len(self.LPfile.readat(None, 0)):
                raise SeekPastEndOfFileError("Offset is past the end of the file")
            else:
                self.LPfile.writeat(data, offset)

                if self.filename == "default":
                    self.default_modi = True
                    self.default_modi_time = getruntime()
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            self.LPfile.close()

            if self.default_modi:
                for filename, created_time in self.closed_files.items():
                    if created_time >= self.default_modi_time and filename != "default":
                        removefile(filename)
                        del self.closed_files[filename]
        finally:
            self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename in listfiles(): 
        removefile(filename)
    else:
        raise FileNotFoundError("File" + filename + "not found.")


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()