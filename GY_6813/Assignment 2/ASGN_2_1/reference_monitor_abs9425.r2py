"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py reference_monitor_abs9425.r2py abs9425_attackcase.r2py
    
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

FILE_BUFFER = set()
OPEN_FILES = set()

lock = createlock()

def should_exclude(filename):
    extensions_to_exclude = [
        ".r2py", ".py", ".md", ".pyc", ".yml", ".so.mac", 
        ".default", ".fixed", ".test", ".threeports", 
        ".twoports", ".widenet", ".mix", ".sh"
    ]
    for ext in extensions_to_exclude:
        if filename.endswith(ext):
            return True
    return False

try:
    for filename in listfiles():
        if not should_exclude(filename):
            FILE_BUFFER.add(filename)
except RepyArgumentError as e:
    raise RepyArgumentError("error in system")

def validate_filename(filename):
    if filename in OPEN_FILES:
        raise FileInUseError("Trying to open file in use, If you are trying to make a new copy using default file, close the defualt file first")
    if not filename or filename in ['.', '..','.r2py'] or filename.startswith('.'):
        raise RepyArgumentError("Invalid filename")
    if len(filename) > 120:
        raise RepyArgumentError("Filename too long")
    for c in filename:
        if c.islower():
            pass
        elif c.isdigit():
            pass
        elif c in ['-', '_', '.']:
            pass
        else:
            raise RepyArgumentError("Invalid characters in filename")
    

def delete_closed_files():
    for filename in list(FILE_BUFFER):
        if filename not in OPEN_FILES and filename != 'default':
            try:
                removefile(filename)
                FILE_BUFFER.remove(filename)
            except:
                pass

class LPFile():
    def __init__(self, filename, create):
        # globals
        self.filename = filename
        self.lock = createlock()
        self.closed = False

        if create == False:
            if 'default' not in FILE_BUFFER:
                raise FileNotFoundError("Default file not found")

            default_file = openfile('default', False)

            self.lock.acquire(True)
            try:
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                default_file.close()
            finally:
                self.lock.release()

            self.LPfile = openfile(filename, True)

            self.lock.acquire(True)
            try:
                self.LPfile.writeat(content, 0)
            finally:
                self.lock.release()
        else:
            self.LPfile = openfile(filename, True)
            if filename == 'default' and 'default' not in FILE_BUFFER:
                delete_closed_files()

        FILE_BUFFER.add(filename)
        OPEN_FILES.add(filename)

    def readat(self, num_bytes, offset):
        self.lock.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File is closed")
            if offset < 0:
                raise RepyArgumentError("Negative read offset speficied!")
            return self.LPfile.readat(num_bytes, offset)
        finally:
            self.lock.release()

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File is closed")
            if offset < 0:
                raise RepyArgumentError("Negative read offset speficied!") 
            if self.filename == 'default':
                delete_closed_files()
            self.LPfile.writeat(data, offset)
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File is closed")
            self.LPfile.close()
            self.closed = True
            OPEN_FILES.remove(self.filename)
        finally:
            self.lock.release()
        
def LPopenfile(filename, create):
    validate_filename(filename)
    if filename in OPEN_FILES:
        raise FileInUseError("File is already open")
    return LPFile(filename, create)

def LPremovefile(filename):
    validate_filename(filename)
    if filename in OPEN_FILES:
        raise FileInUseError("Cannot remove an open file")
    removefile(filename)
    FILE_BUFFER.discard(filename)
    if filename == 'default':
        delete_closed_files()


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()