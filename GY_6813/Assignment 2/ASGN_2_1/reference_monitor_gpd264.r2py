"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


#Stores all closed files
closed_files = []

#Stores files that were created, not opened
created_files = []

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        self.filename = filename

        if create == False:
            if('default' in listfiles()):
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat

                #If file already exists, delete it so templete gets copied over properly
                if(filename in listfiles()):
                    removefile(filename)

                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()

                created_files.append(filename)
            else:
                raise FileNotFoundError
        else:
            #If file is created, add to created_files
            if(filename not in listfiles()):
                if(filename == "default"):
                    self.delete_closed_files()
                else:
                    created_files.append(filename)

            self.LPfile = openfile(filename, create)

    def readat(self, num_bytes, offset):
        if offset < 0:
            raise ValueError("Offset must be nonnegative")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not isinstance(data, str):
            raise TypeError("Data must be a string")
        if offset < 0:
            raise ValueError("Offset must be nonnegative")
        if(self.filename == "default"):
            self.delete_closed_files()
        self.LPfile.writeat(data, offset)

    def close(self):
        if(self.filename != 'default'):
            closed_files.append(self.filename)
        self.LPfile.close()

    def delete_closed_files(self):
        delete_files = [f for f in closed_files if f in created_files and f != 'default']
        for file in delete_files:
            removefile(file)
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if(filename == 'default'):
        temp_file = LPopenfile('default', True)
        temp_file.delete_closed_files()
        temp_file.close()
    removefile(filename) 



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()