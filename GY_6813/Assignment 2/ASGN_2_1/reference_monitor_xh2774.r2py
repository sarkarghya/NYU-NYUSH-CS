"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


created_files = set()
open_files = set()


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False

        self.filename = filename

        if self.filename in open_files:
            raise FileInUseError("File is already open.")

        open_files.add(filename)

        if create == False:
            if 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                default_file.close()
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                created_files.add(filename)
            else:
                raise FileNotFoundError("Default file not found")
        else:
            self.LPfile = openfile(filename, True)
            created_files.add(filename)
            if filename == 'default':
                self.delete_closed_files()

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    def close(self):
        if self.filename not in open_files:
            raise FileClosedError("File is already closed.")
        self.LPfile.close()
        open_files.remove(self.filename)

    def delete_closed_files(self):
        closed_files = created_files - open_files
        for file in closed_files:
            removefile(file)
            created_files.remove(file)

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename in open_files:
        raise FileInUseError("Cannot remove open file")
    elif filename in created_files:
        created_files.remove(filename)
    removefile(filename)

def monitor_default_file():
    if 'default' in listfiles():
        default_file = openfile('default', False)
        content = default_file.readat(None, 0)
        default_file.close()

        for file in listfiles():
            if file in created_files and file not in open_files:
                removefile(file)
                created_files.remove(file)

def LPwriteat(filename, data, offset):
    if filename == 'default':
        # If default is written to, monitor and clean closed files
        monitor_default_file()

    file = openfile(filename, False)
    file.writeat(data, offset)
    file.close()

def LPdeletefile(filename):
    if filename == 'default':
        monitor_default_file()  # Monitor 'default' if it's deleted
    removefile(filename)

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()