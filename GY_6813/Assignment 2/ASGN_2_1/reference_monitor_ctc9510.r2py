"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext['closed_list'] = []
mycontext['open_list'] = []



class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename
        if filename == 'default' and create == True:
            try:
                self.LPfile = openfile(filename, True)
            except (FileError, FileNotFoundError, FileInUseError) as err:
                raise err("File Error", err)
                return
            default_modified()
        elif create == False and 'default' in listfiles():
            mycontext['open_list'].append(filename)
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            default_file.close()
        elif create == False:
            raise FileNotFoundError("Default File Not Found")
        else:
            try:
                self.LPfile = openfile(filename, create)
            except (FileNotFoundError, FileInUseError, FileError) as err:
                raise err("File Error", err)

    def readat(self, num_bytes, offset):
        try:
            return self.LPfile.readat(num_bytes, offset)
        except FileClosedError:
            raise FileClosedError("File", self.filename, "not open")

    def writeat(self, data, offset):
        if self.filename == 'default':
            default_modified()
        try:
            self.LPfile.writeat(data, offset)
        except FileClosedError:
            raise FileClosedError("File", self.file, "not open")

    def close(self):
        try:
            self.LPfile.close()
        except FileClosedError:
            raise FileClosedError("File", self.filename, "is already closed")
            return
        if self.filename in mycontext['open_list']:
            mycontext['closed_list'].append(self.filename)
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    try:
        removefile(filename)
    except (FileNotFoundError, FileInUseError, FileError) as err:
        raise err("File Error", err)
        return
    if filename == 'default':
        default_modified()
    
def default_modified():
    for item in mycontext['closed_list']:
        LPremovefile(item)
    mycontext['closed_list'] = []
    



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()