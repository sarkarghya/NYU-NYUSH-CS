
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# global variables used to keep track of opened and closed files
opened = {}
closed = set()

# helper function to check if a file name is valid
boolean valid_name(filename):
    if len(filename) == 0 or len(filename) > 120:
        return False
    if filename in [".", ".."]:
        return False
    if filename[0] == ".":
        return False
    for c in filename:
        if not(c.islower() or c.isdigit() or c in ["-", "_", "."]):
            return False
    return True

class LPFile():
    def __init__(self, filename, create):
        # case when the file name is invalid
        if not valid_name(filename):
            raise FileNotFoundError("Invalid file name")
        # case when the file passed in is already opened
        if filename in opened:
            raise FileInUseError("File is already opened")

        # case when the file doesn't exist and default file contents are copied to the new file
        if create == False and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            default_file.close()
        # case when there is no default file
        else:
            if create == False and 'default' not in listfiles():
                raise FileNotFoundError("The default file doesn't exist")
            self.LPfile = openfile(filename, create)
        opened[filename] = self

    def readat(self, num_bytes, offset):
        filename = [key for key, value in opened.items() if value == self][0]
        if not valid_name(filename):
            raise FileNotFoundError("Invalid file name")
        if filename not in listfiles():
            raise FileNotFoundError("File doesn't exist")
        # case when the file passed in is already closed
        if filename in closed:
            raise FileClosedError("File is closed and can't be read")
        # case when the file isn't opened
        if filename not in opened.keys():
            raise FileNotFoundError("File isn't opened")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        filename = [key for key, value in opened.items() if value == self][0]
        if not valid_name(filename):
            raise FileNotFoundError("Invalid filename")
        if filename not in listfiles():
            raise FileNotFoundError("File doesn't exist")
        # case when the file passed in is already closed
        if filename in closed:
            raise FileClosedError("File is closed and can't be written to")
        # case when the file isn't opened
        if filename not in opened.keys():
            raise FileNotFoundError("File isn't opened")
        self.LPfile.writeat(data, offset)

    def close(self):
        filename = [key for key, value in opened.items() if value == self][0]
        if not valid_name(filename):
            raise FileNotFoundError("Invalid file name")
        if filename not in listfiles():
            raise FileNotFoundError("File doesn't exist")
        # case when the file passed in is already closed
        if filename in closed:
            raise FileClosedError("The file is already closed")
        # case when the file hasn't been opened
        if filename not in opened.keys():
            raise FileNotFoundError("File hasn't been opened")
        self.LPfile.close()
        closed.add(filename)
        del opened[filename]
        
def LPopenfile(filename, create):
    if not valid_name(filename):
        raise FileNotFoundError("Invalid file name")
    if create and filename in listfiles():
        raise FileInUseError("File already exists")
    return LPFile(filename, create)

def LPremovefile(filename):
    if not valid_name(filename):
        raise FileNotFoundError("Invalid file name")
    if filename not in listfiles():
        raise FileNotFoundError("File doesn't exist")
    # if the default file is deleted or written to, delete all closed files
    if filename == "default" and filename in listfiles():
        for file in closed:
            if file in listfiles():
                removefile(file)
        closed.clear()
    else:
        removefile(filename) 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()