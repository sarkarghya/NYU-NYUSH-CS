"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

my_LPs = {}

class LPFile():
    def __init__(self, filename, create):

	# globals
        mycontext['debug'] = False
	self.isopen = True
	self.filename = filename

	#file already exists
	if filename in my_LPs:
	    if my_LPs[filename].isopen == True:
		raise FileAlreadyOpenError
	    else:
	    	self = my_LPs[filename]
		self.isopen = True
	    

	#default doesn't exist yet and you are opening default
	elif filename == 'default' and 'default' not in listfiles():
	    self.LPfile = openfile(filename, create)
	    my_LPs['default'] = self
	    for i in my_LPs:
	   	if not my_LPs[i].isopen:
		    removefile(i)
		    del my_LPs[i]

	#default isn't in VM yet and you are opening default
	elif filename == 'default' and 'default' in listfiles():
	    my_LPs['default'] = self
	    for i in my_LPs:
	   	if not my_LPs[i].isopen:
		    removefile(i)
		    del my_LPs[i]

	#filename != 'default'
	else:
	    
	    #create == True
	    if create == True:
		self.LPfile = openfile(filename, create)
		my_LPs[filename] = self

	    #create == False
	    #default does not exist
	    elif create == False and 'default' not in listfiles() and 'default' not in my_LPs:
	  	raise FileNotFoundError

	    #default is not in VM but exists
	    elif 'default' not in my_LPs:
	    	default_file = openfile('default', False)
            	content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            	self.LPfile = openfile(filename, True)
            	self.LPfile.writeat(content, 0)
            	default_file.close()
		my_LPs[filename] = self

	    # default is closed and exists
            elif my_LPs['default'].isopen == False:
	    	default_file = openfile('default', False)
            	content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            	self.LPfile = openfile(filename, True)
            	self.LPfile.writeat(content, 0)
            	default_file.close()
	        my_LPs[filename] = self
		
	    # default is open and exists
	    else:
	    	default_file = my_LPs['default']
	    	content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            	self.LPfile = openfile(filename, True)
            	self.LPfile.writeat(content, 0)
            	default_file.close()
		my_LPs[filename] = self


    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)
	if self.filename == 'default':
	    for i in my_LPs:
	    	if not my_LPs[i].isopen:
		    removefile(i)
		    del my_LPs[i]

    def close(self):
        self.LPfile.close()
	self.isopen = False

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == 'default':
	for i in my_LPs:
	   if not my_LPs[i].isopen:
		removefile(i)
		del my_LPs[i]
    removefile(filename) 

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
