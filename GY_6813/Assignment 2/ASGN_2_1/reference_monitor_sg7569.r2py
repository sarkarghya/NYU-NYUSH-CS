"""
This security layer handles the default functionality as specified.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python 3
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Initialize global context
if "created_files" not in mycontext:
    mycontext["created_files"] = set()

if "open_files" not in mycontext:
    mycontext['open_files'] = set()

class LPFile:
    def __init__(self, filename, create):
        mycontext['debug'] = False
        
        if filename in mycontext['open_files']:
            raise FileInUseError("File is already open")

        try:
            if not create and 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0)
                default_file.close()
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                mycontext['created_files'].add(filename)
            else:
                self.LPfile = openfile(filename, create)
                if create:
                    mycontext['created_files'].add(filename)
        except FileNotFoundError:
            raise FileNotFoundError("File '" + filename + "' not found")
        except FileInUseError:
            raise FileInUseError("File '" + filename + "' is already in use")
        except FileError as e:
            raise FileError("Error opening file '" + filename + "': " + str(e))

        mycontext['open_files'].add(filename)
        self.filename = filename

    def readat(self, num_bytes, offset):
        try:
            return self.LPfile.readat(num_bytes, offset)
        except SeekPastEndOfFileError:
            raise SeekPastEndOfFileError("Attempted to read past end of file")
        except FileClosedError:
            raise FileClosedError("File is closed")

    def writeat(self, data, offset):
        try:
            self.LPfile.writeat(data, offset)
        except SeekPastEndOfFileError:
            raise SeekPastEndOfFileError("Attempted to write past end of file")
        except FileClosedError:
            raise FileClosedError("File is closed")

    def close(self):
        if self.filename not in mycontext['open_files']:
            raise FileClosedError("File is already closed")
        
        try:
            self.LPfile.close()
        except FileError as e:
            raise FileError("Error closing file '" + self.filename + "': " + str(e))
        finally:
            mycontext['open_files'].remove(self.filename)

def LPopenfile(filename, create):
    try:
        return LPFile(filename, create)
    except (FileNotFoundError, FileInUseError, FileError) as e:
        raise e

def LPremovefile(filename):
    try:
        if filename == 'default':
            for f in list(mycontext['created_files']):
                if f not in mycontext['open_files']:
                    removefile(f)
                    mycontext['created_files'].remove(f)
        removefile(filename)
        if filename in mycontext['created_files']:
            mycontext['created_files'].remove(filename)
    except FileNotFoundError:
        raise FileNotFoundError("File '" + filename + "' not found")
    except FileInUseError:
        raise FileInUseError("File '" + filename + "' is in use and cannot be removed")
    except FileError as e:
        raise FileError("Error removing file '" + filename + "': " + str(e))

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, type(None)), int), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()