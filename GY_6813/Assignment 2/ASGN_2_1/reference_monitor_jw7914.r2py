"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext["open_files"] = {} # Keep track of all created files
mycontext["closed_files"] = {} # Keep track of all closed files

class LPFile():
    def __init__(self, filename, create):
        self.filename = filename
        self.isOpen = None
        # globals
        mycontext['debug'] = False

        if create == False: #Use default as template
            if 'default' in listfiles(): 
                default_file = openfile('default', False)
                content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
                self.LPfile = openfile(filename, True)
                self.LPfile.writeat(content, 0)
                default_file.close()
            else: #Default doesn't exist
                raise FileNotFoundError("default doesn't exist")
        else: #Create a new file
            self.LPfile = openfile(filename, create)
        
        self.isOpen = True
        #Keep track of created files
        mycontext["open_files"][filename] = self.LPfile
        # log("Created " + filename + "\n")

    def readat(self, num_bytes, offset):
        if self.isOpen == False:
            raise ValueError(self.filename + " is closed")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if self.isOpen == False:
            raise ValueError(self.filename + " is closed")
        if self.filename == "default":
            remove_closed_files()
            # log("Written to " + self.filename +"\n")

        self.LPfile.writeat(data, offset)

    def close(self):
        self.isOpen = False
        #Keep track of closed files
        if self.filename in mycontext["open_files"]:
            del mycontext["open_files"][self.filename]
        mycontext["closed_files"][self.filename] = self.LPfile
        self.LPfile.close()
        # log ("Closed " + self.filename + "\n")
        
def LPopenfile(filename, create):
    if filename in mycontext["open_files"] or filename in mycontext["closed_files"]: #If file already exists
        raise ValueError(filename + " already exists")
    if filename == "default":
        remove_closed_files()

    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == "default":
        remove_closed_files(True)
        # log("Removed " + filename + "\n")
    else:
        removefile(filename)

def remove_closed_files(all = False):
    for filename in mycontext["closed_files"].keys():
        if all or filename != 'default': #Remove all closed files except default or include removing default if called form LPremovefile
            removefile(filename)
            del mycontext["closed_files"][filename]
            # log(filename)
            



# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()