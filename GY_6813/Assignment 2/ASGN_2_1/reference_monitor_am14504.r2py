"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

# Custom Exception classes
class FileInUseError(Exception):
    """
        Custom error class since python does not have an inbuilt class for this error.
        Must be invoked when trying to access a file that is already being used by another process.
    """
    pass

class FileClosedError(Exception):
    """
        Custom error class since python does not have an inbuilt class for this error.
        Must be invoked when trying to close an already closed file.
    """
    pass

class InvalidOffsetError(Exception):
    """
        Custom error class that must be invoked when using an offset that is invalid.
        Valid values of offset is in the range [0, EOF]
    """
    pass

# LPFile class with constructor, open, read, write, close functions and a function to remove closed files
# (??) Retry why class variables not able to be made as private
class LPFile():
    
    # Class attributes to store open and closed files, and a dictionary to map file sizes
    closed_files = set()
    open_files = set()
    filesize = {}
    
    def __init__(self, filename, create):

        # Storing filename 
        self.filename = filename

        # Raising an error when a file is already opened
        if filename in LPFile.open_files:
            raise FileInUseError

        # As per specification => False requires 'default' to be present so as to create the file
        if create == False and 'default' not in listfiles():
            raise FileNotFoundError

        # If 'default' is being created.
        if create == True and filename == 'default':
            self.LPfile = openfile(filename, create)
            self.filesize = len(self.LPfile.readat(None, 0))

            # Removing previously created closed files since default is being created
            self.remove_closed_file()

            # Adding this file to set of open files
            LPFile.open_files.add(filename)
            LPFile.filesize[filename] = self.filesize
            return
        
        # As per specification => False implies that 'default' file must be used as template for creating the file
        if create == False and filename != 'default' and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0) # Read from the file using the sandbox's readat
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
            self.filesize = len(content)
            default_file.close()

            # Adding this file to set of open files
            LPFile.open_files.add(filename)
            LPFile.filesize[filename] = self.filesize

        else:
            self.LPfile = openfile(filename, create)

            if filename in LPFile.filesize:
                self.filesize = LPFile.filesize[filename]
            else:
                # Storing file sizes to avoid repeated reads to get length of file
                self.filesize = len(self.LPfile.readat(None, 0))
                LPFile.filesize[filename] = self.filesize

            # Adding this file to set of open files
            LPFile.open_files.add(filename)

    def readat(self, num_bytes, offset):
        # Invalid file offset
        if offset < 0 or offset > self.filesize:
            raise InvalidOffsetError
        
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # Invalid file offset
        if offset < 0 or offset > self.filesize:
            raise InvalidOffsetError
        
        # If default is being modified
        if self.filename == 'default':
            self.LPfile.writeat(data, offset)
            
            # Removing previously created closed files
            self.remove_closed_file()
        
        else:
            self.LPfile.writeat(data, offset)
            
            # Modifying file size value for the file
            self.filesize = max(self.filesize, offset + len(data))
            LPFile.filesize[self.filename] = self.filesize

    def close(self):
        # Raising an error when files are already closed
        if self.filename in LPFile.closed_files:
            raise FileClosedError
        
        self.LPfile.close()

        # Adding closed file to set of closed files and removing it from set of open files
        LPFile.closed_files.add(self.filename)
        LPFile.open_files.remove(self.filename)

    def remove_closed_file(self):
        # As per specification, to remove closed files upon modification/creation/deletion of 'default'
        for filename in list(LPFile.closed_files):
            if filename != 'default' and filename in listfiles():
                removefile(filename)
        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    # If file does not exist
    if filename not in listfiles():
        raise FileNotFoundError

    # If 'default' is being deleted
    elif filename == 'default':
        if filename in listfiles():
            removefile(filename)
            
            # Deleting previously closed files
            for closed_file in list(LPFile.closed_files):
                if closed_file != 'default' and closed_file in listfiles():
                    removefile(closed_file)

            # Clearing the set of closed files
            LPFile.closed_files.clear()

    else:
        removefile(filename)


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()