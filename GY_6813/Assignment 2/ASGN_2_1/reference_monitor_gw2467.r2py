

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False

        # Check if 'default' exists if not creating a new file
        if not create and 'default' in listfiles():
            default_file = openfile('default', False)
            content = default_file.readat(None, 0)  # Read content from the default file
            default_file.close()

            
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)
        elif create:
            # If creating a new file, just open it
            self.LPfile = openfile(filename, create)
        else:
            raise FileNotFoundError("The default file does not exist.")

        if 'open_files' not in mycontext:
            mycontext['open_files'] = []
        mycontext['open_files'].append(filename)

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)

    def close(self):
        # Remove the file from the list of open files
        mycontext['open_files'].remove(self.LPfile.filename)
        self.LPfile.close()
        self._check_and_remove_closed_files()

    def _check_and_remove_closed_files(self):
        # Remove all files that were created and are now closed
        for filename in listfiles():
            if filename != "default" and filename not in mycontext['open_files']:
                removefile(filename)

def LPopenfile(filename, create):
    
    if not valid_filename(filename):
        raise ValueError("Invalid filename.")

    return LPFile(filename, create)

def LPremovefile(filename):
    if filename == "default":
        # If the default file is deleted, remove all other closed files
        for file in listfiles():
            if file != "default":
                removefile(file)
    elif filename in mycontext['open_files']:
        raise Exception("Cannot remove an open file.")
    removefile(filename)

def valid_filename(filename):
    # Validate the filename according to the specified rules
    valid_chars = "abcdefghijklmnopqrstuvwxyz0123456789-_."  # Allowed characters
    if (not filename or filename in {".", ".."} or filename.startswith(".") or 
            len(filename) > 120 or any(c not in valid_chars for c in filename)):
        return False
    return True

# The code below sets up type checking and variable hiding for you.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()



