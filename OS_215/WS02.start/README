
First Name: Arghya

Last Name: Sarkar

NYU ID: abs9425

=======================================================================================
Files submitted:

.
├── bin
│   ├── decoder
│   └── multi-converter
├── include
│   ├── converters.h
│   └── decoder.h
├── lib
│   └── libstack.a
├── makefile
├── obj
│   ├── converters.o
│   └── multi-converter.o
├── README
└── src
    ├── converters.c
    ├── decoder.c
    └── multi-converter.c


=======================================================================================
Targets in the Makefile:

`make Q2`: Q2.
`make Q3`: Q3.
`make clean`: remove all files in bin/, src/ and lib/ for a fresh restart

=======================================================================================
Comments:

# Q3

This question uses sync computing for childern thus not maintaining the order of the example.

=======================================================================================
Textual answers: 

# Q1

The total number of child processes created is 6.


	Family tree:

		  Parent
		 /   |  \	
		/	 |   \
		C1	C2	 C3
			 |	  |
			 |	  |
			GC1	 GC2
				  |
				  |
				GGC1


    Output:

        Parent: N/A
        C1:		i = 0
                j = 0
        C2:		i = 1
        GC1:	j = 1
        C3:		i = 2
        GC2:	N/A
        GGC1:	j = 2


    Code Modification:

        #include <stdio.h>
        #include <stdlib.h>
        #include <unistd.h>
        #include <sys/wait.h>

        int main (int arg, char * argv []) {
        int i, j, p;
        for (i = 0; i <3; i ++) {
            if ((p = fork ()) == 0){ 
                // #C1 (i = 0, p = 0) #C2 (i = 1, p = 0) #C3 (i = 2, p = 0)
                printf( "i =% d \n", i);
                j = 0;
                // #C1 (i = 0, j = 0, p = 0) #C2 (i = 1, j = 0, p = 0) #C3 (i = 2, j = 0, p = 0)
                while ((j < i) && ((p = fork ()) == 0)) // #GC1 #GC2 #GCC1
                    j ++;
                // #C1  (i = 0, j = 0, p = 0) #C2  (i = 1, j = 0, p = id) #C3  (i = 2, j = 0, p = id) 
                // #GC1 (i = 1, j = 1, p = 0) #GC2 (i = 2, j = 1, p = id) #GCC1 (i = 2, j = 2, p = 0)
                if (p == 0) 
                    printf ( "j =% d \n", j);

                // ## Addition 1 ##
                else
					wait(NULL); // Child waits for grandchild process(es) to exit before continuing
                // ################

                exit(j);
            } / * if * /

            // ## Addition 2 ##
            else {
                wait(NULL); // Parent waits for child process to exit before continuing
                // I am well aware that this does not make use of parallelization since we are waiting for the child to finish execution but it does not say in the question that we must make use of syncronization so I would much rather stick to a safer approach.
                // If we want to parralelize, we must add a loop to create 3 wait statements for the parent after the for loop and remove this else statement.
                printf( "Parent free to exit or loop\n");
            }
            // ################

        }
        return (0);
    }